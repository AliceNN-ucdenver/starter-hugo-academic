[{"authors":null,"categories":null,"content":"As a distinguished AntiaB.org AI Committee Member and Vice President of Global Architecture, Big Data, and Information Risk at Manulife, Shawn McCarthy is currently pursuing a PhD with a focus on the impact of global events on market sentiment. His research, which builds upon a prior study Enhancing Financial Market Analysis and Prediction with Emotion Corpora and News Co-Occurrence Network, seeks to uncover the intricate relationships between world events, producing countries, and their corresponding financial markets.\nMcCarthy is not merely conducting research; he is creating a novel framework. His work aims to develop a comprehensive understanding of how news analysis and global events influence market sentiment across various sectors. By constructing an extensive model for market prediction and risk management, he is enabling organizations to navigate the complexities of financial markets within an interconnected global economy more effectively.\nIn his role as a Graduate Instructor at the esteemed University of Colorado, McCarthy upholds his professional motto, Inspire Growth and is committed to fostering innovation in others. His efforts extend beyond the immediate confines of finance and academia, as he seeks to develop future leaders capable of navigating the challenges of an increasingly complex global market.\n","date":1549324800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1567641600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"As a distinguished AntiaB.org AI Committee Member and Vice President of Global Architecture, Big Data, and Information Risk at Manulife, Shawn McCarthy is currently pursuing a PhD with a focus on the impact of global events on market sentiment.","tags":null,"title":"Shawn McCarthy","type":"authors"},{"authors":null,"categories":null,"content":" Table of Contents Course Syllabus Spring, 2024 Course Outline: Lecture Videos Courses in this program Meet your instructor FAQs CSCI 3916: Web API Technologies Course Syllabus Spring, 2024 Instructor: Shawn McCarthy\nEmail: shawn.mccarthy@ucdenver.edu\nPhone: (303) 900-8613\nClass: Microsoft Teams / 330PM (Monday)\nOffice Hours: 445pm-545pm M/W Teams\nCatalog Data: Topics in JavaScript Web technologies for front-end development and back-end development. Building a full end to end solution with a mobile or web front-end, Web API and NoSQL database\nCo-requisites: N/A\nPrerequisites: CSCI 2421-3 Data Structures \u0026amp; Program Design\nNote: Each student must sign and return the attached Prerequisites Agreement form to receive any credit for any assignment or exam. If this form is not returned by the 1st week, the student will be administratively dropped from the course.\nExpected Knowledge at the Start of the Course:\nData structures for simplifying algorithm design Expected Knowledge Gained at the end of the Course:\nSolid understanding of JavaScript, NodeJS, Development of Web APIs, NoSQL Databases and React front-end complete solution ABET Assessment Criteria:\nThis is a Computer Science Tech Elective, specifically students design, implement and test Web APIs in the context of this course. (2) Design, implement, and evaluate a computing-based solution to meet a given set of computing requirements in the context of the program’s discipline Course Objectives: Full stack development (GitHub, Unit Testing, Integration Testing) focused on building Web APIs.\nTextbook:\nFull-Stack React Projects MERN Projects for Beginners (Only if you choose to do an individual project) Optional: Beginning MERN Stack Optional: Learning JavaScript Topics: Web APIs (Design, Best Practices and Development). JavaScript, NodeJS, TypeScript, React, MongoDB\nCourse Outline: Lecture/Week Date Topic Reading Assignments 1 Jan 17th GitHub, PostMan MERN: Chapter 1 MERN Setup, Full Stack: Preparing the Development Environment, JavaScript Making Sense of the Madness (YouTube) 2 Jan 22nd HTTP Learn JavaScript - Full Course for Beginners Hw0 Due Jan 28th 3 Jan 29th ES6/JavaScript, Heroku, Pick Teams The Modern JavaScript Tutorial Hw1 Due Feb 4th 4 Feb 5th NodeJS, Authorization, Basic Auth, oAuth Full Stack: Auth with JWT 5 Feb 12th Swagger, Node Security, Unit Testing, Pre-React Getting Started with React - Quick Start and Tutorial 6 Feb 19th API Design / Swagger / Best Practices, React Auth Full Stack: Following Best practices, Full Stack: Adding a React Frontend Hw2 Due Feb 25th 7 Feb 26th MongoDB Full Stack: Building a Backend with MongoDB 8 Mar 4th API Management, TypeScript Hw3 Due Mar 10th 9 Mar 11th Analytics, Code Smells (Spec topic) Code Smells and how to fix them (YouTube) 10 Mar 18th Spring Break 11 Mar 25th CSS Hw4 Due Mar 31st 12 Apr 1st React Movie, Patterns (Spec Topic) 13 Apr 8th React Hw5 Due Apr 14th 14 Apr 15th Mobile, Monetization 15 April 22nd Project Days 16 April 29th Project Presentations Lecture Videos Lecture/Week Date Video 1 Jan 17th REST OverviewGitHub Slides JavaScript Making Sense of the Madness (YouTube) 2 Jan 22nd Assignment 0 Walkthrough Doctors and Patients API Learn JavaScript - Full Course for Beginners (YouTube) HTTP Lecture 1 HTTP Lecture 2 3 Jan 29th JavaScript Lecture Render Deployment 4 Feb 5th Node NodeJS Full Course (YouTube) Assignment 2 Walkthrough 5 Feb 12th Node Security and Unit Testing Unit Testing and Pre-React 6 Feb 19th Best Practices\nReact Auth 7 Feb 26th Mongo Mongo - User Schema Render - Deploy React 8 Mar 4th TypeScript 9 Mar 11th Code Smells Analytics 10 Mar 18th Springk Break - All Regrades up (Through Assignment 3) to this point must be in by EOD Sunday Grading Policy:\nHomework: 65% Projects: 35% Notes: UCD Code of Honor as in the catalog: UCD Honor Code\nProjects (you can work individual or as a team of up to 5)\nIndividual Projects: MERN Projects for Beginners (any one of the 5 applications) with one additional feature added (your proposal should include what you are going to add to one of the project ideas) Team Projects: Full Stack React: See Online Marketplace (with extending marketplace for orders and payment) example and build in the additional capabilities Mental Health Resources: CU Denver faculty and staff understand the stress and pressure of college life. Students experiencing symptoms of anxiety, depression, substance use, loneliness or other issues affecting their mental well-being, have access to campus support services such as the Student and Community Counseling Center, the Wellness Center and the Office of Case Management. Students also have access to the You@CUDenver on-line well-being platform available 24/7. More information about mental health education and resources can be found at Lynx Central and CU Denver’s Health \u0026amp; Wellness page. Students in imminent crisis can contact Colorado Crisis Services for immediate assistance 24/7 or walk-in to the counseling center during regular …","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"281c106c6081a8571d1e47bc96a23fce","permalink":"https://mccarthy.phd/course/web-api/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/course/web-api/","section":"course","summary":"CSC3916 Web API Technologies","tags":["current"],"title":"📊 Learn Web APIs","type":"book"},{"authors":null,"categories":null,"content":" Table of Contents Course Syllabus Fall, 2024 Course Outline: Courses in this program Meet your instructor FAQs CSCI XXXX: Generative Deep Learning Course Syllabus Fall, 2024 Instructor: Shawn McCarthy\nEmail: shawn.mccarthy@ucdenver.edu\nPhone: (303) 900-8613\nClass: Microsoft Teams / 330PM (Wednesday) Office Hours: 445pm-545pm M/W Teams\nCatalog Data: An in-depth examination of generative deep learning, focusing on the design and development of models that can generate new content.\nCo-requisites: N/A\nPrerequisites:\nCSCI 3412 - Algorithms Note: Each student must sign and return the attached Prerequisites Agreement form to receive any credit for any assignment or exam. If this form is not returned by the 1st week, the student will be administratively dropped from the course.\nExpected Knowledge at the Start of the Course:\nUnderstanding of data structures and algorithm design Familiarity with a high-level programming language, such as Python Expected Knowledge Gained at the end of the Course:\nSolid understanding of generative deep learning and its applications Experience in implementing different types of generative models like VAEs, GANs, and autoregressive models Experience with TensorFlow and Keras Understanding of the practical considerations in training generative models ABET Assessment Criteria:\nThis is a Computer Science Tech Elective, specifically students design, implement and test Generative Deep Learning in the context of this course. (2) Design, implement, and evaluate a computing-based solution to meet a given set of computing requirements in the context of the program’s discipline Course Objectives: Develop a solid understanding of generative deep learning and its applications. The course will provide hands-on experience with designing, implementing, and training generative models.\nTextbook:\nGenerative Deep Learning: Teaching Machines to Paint, Write, Compose, and Play Generative AI with LangChain: Build large language model (LLM) apps with Python, ChatGPT and other LLMs Topics: Generative modeling, Deep learning, Variational autoencoders, Generative adversarial networks, Autoregressive models, Normalizing flow models, Energy-based models, Diffusion models, Transformers, Music generation, World models, Multimodal models, Ethics and challenges in generative AI\nCourse Outline: Lecture/Week Date Topic Reading Assignments 1 Aug 19th Introduction to the course and Generative Deep Learning Preface, Foreword, Objective and Approach, I. Introduction to Generative Deep Learning, 1. Generative Modeling Read through “Introduction to Generative Deep Learning”. Write a 1-2 page reflection on “What Is Generative Modeling?” and “Generative Versus Discriminative Modeling”. 2 Aug 26th Deep Learning 2. Deep Learning Complete exercises on preparing data, building, compiling, and evaluating the model. 3 Sep 02nd Variational Autoencoders 3. Variational Autoencoders Implement a basic Variational Autoencoder on Fashion-MNIST Dataset. 4 Sep 09th Generative Adversarial Networks 4. Generative Adversarial Networks Implement a simple Generative Adversarial Network. 5 Sep 16th Autoregressive Models 5. Autoregressive Models Implement an autoregressive model and generate a sequence. 6 Sep 23rd Normalizing Flow Models 6. Normalizing Flow Models Experiment with a simple normalizing flow. 7 Sep 30th Energy-Based Models 7. Energy-Based Models Create a simple energy-based model. 8 Oct 07th Diffusion Models 8. Diffusion Models Implement a diffusion model. 9 Oct 14th Transformers for Generative Models 9. Transformers for Generative Models Implement a Transformer model for sequence generation. 10 Oct 21st Music Generation 10. Music Generation Develop a simple model for music generation. 11 Oct 28th World Models 11. World Models Implement a simple world model. 12 Nov 04th Multimodal Models 12. Multimodal Models Implement a model that combines different types of data. 13 Nov 11th Ethics and Challenges in Generative AI 13. Ethics and Challenges in Generative AI Discussion and reflection on the ethical considerations and challenges in generative AI. 14 Nov 18th Project Presentations Present final projects. 15 Nov 25th Thanksgiving Break 16 Dec 02nd Course Wrap-up Course reflection. Grading Policy:\nHomework: 65% Projects: 35% Extra credit Nvidia DLI certification up to 5% (NLP or Generative AI) Notes: UCD Code of Honor as in the catalog: UCD Honor Code\nProjects (you can work individual or as a team of up to 5)\nApplications based on Part III Langchain based applications Mental Health Resources: CU Denver faculty and staff understand the stress and pressure of college life. Students experiencing symptoms of anxiety, depression, substance use, loneliness or other issues affecting their mental well-being, have access to campus support services such as the Student and Community Counseling Center, the Wellness Center and the Office of Case Management. Students also have access to the You@CUDenver on-line well-being platform available 24/7. More …","date":1610841600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1610841600,"objectID":"1c3464ad5d4f59ccce0595bfe2f8d93c","permalink":"https://mccarthy.phd/course/gen-ai/","publishdate":"2021-01-17T00:00:00Z","relpermalink":"/course/gen-ai/","section":"course","summary":"CSCI XXXX Generative Deep Learning","tags":["current"],"title":"🧠 Learn Generative Deep Learning","type":"book"},{"authors":null,"categories":null,"content":"Purpose In this assignment, you will familiarize yourself with Postman, HTTP, and REST protocols using the Postman testing framework. You will also create your first node program and commit it to GitHub. Your task will be to create a Postman collection and automate REST tests within the project. Each test should include the required assertions.\nPrerequisites Create a free account on GitHub. Accept GitHub Classroom – this should have been provided to you by your instructor. Classroom Assignment0 GitHub Classroom will clone the repository CSC3916_Assignment0 for you into your GitHub Classroom repository. Download an Integrated Development Environment (IDE). We recommend WebStorm or VSCode. Download the desktop version of Postman. Steps Step 1: Creating a REST Request Open Postman. Click on the ‘New’ button and select ‘Request’. Name your request (for instance ‘Book Search’) and select or create a new collection to store this request. Set the request method to ‘GET’. Set the request URL to https://www.googleapis.com/books/v1/volumes?q={{book_title}}. In the ‘Tests’ tab, add the asserts for the request validation. Step 2: Setting up the Environment Variable and Writing Tests Click on the settings gear icon on the top right of Postman, then click ‘Manage Environments’.\nClick ‘Add’ to create a new environment. Name your environment (for instance ‘Book Search Env’).\nCreate a new variable named ‘book_title’ and set the initial value to ‘Turing’.\nIn the Tests tab, write tests to validate the response. For instance:\npm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); pm.test(\u0026#34;Book title or description includes Turing\u0026#34;, function () { var jsonData = pm.response.json(); for (var i = 0; i \u0026lt; jsonData.items.length; i++) { if (/(turing)/i.test(jsonData.items[i].volumeInfo.title) || /(turing)/i.test(jsonData.items[i].volumeInfo.description)) { pm.environment.set(\u0026#34;book_id\u0026#34;, jsonData.items[i].id); break; } } }); Step 3: Chaining Requests Create a new request as in Step 1. Set the request URL to https://www.googleapis.com/books/v1/volumes/{{book_id}}. Similar to Step 2, write tests to validate the response. Step 4: Modifying googlebooks.js Open your IDE and navigate to /utils/googlebooks.js.\nModify the method to return an object like:\n{ data: response.data, status: response.status, statusText: response.statusText, headers: response.headers, requestHeader: response.config.headers } Step 5: HTTP Headers Analysis Investigate the HTTP headers in the request and response from the Postman console. Create a new text file named headers.txt. Write a brief description of each key-value pair in the HTTP headers in the request and response. Save the file and check it into your GitHub repository with the rest of the project. Submission Create a readme.md file at the root of your GitHub repository. Within your Postman collection, click on the arrow next to the collection name, then select ‘Share’. In the Share dialog, select ‘Embed’. Make sure to include your environment in the share by clicking ‘Environment’ and selecting the correct one. Choose the ‘Markdown’ tab. Click ‘Copy to Clipboard’ and paste this into your readme.md file. Commit and push the updated googlebooks.js file to your GitHub repository. Commit and push the headers.txt file containing your HTTP headers analysis to your GitHub repository. Rubric -10 points: homework not uploaded. -2 points: missing Postman button in readme.md. -2 points: missing check in request 1 for checking title and description in items. -2 points: missing ID check in request 2. -2 points: missing change in utils/googlebooks.js (adding new object). -2 points: missing text file with request headers. Resources How to write tests in Postman (YouTube Video) How to share a postman via run in postman markdown Postman Learning Center: Writing tests Postman Learning Center: Sharing collections Replace “your-collection-id” with the actual ID of your collection.\n","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"61fa96be9b783440df08b5d54fcdd2c9","permalink":"https://mccarthy.phd/course/web-api/assignment0/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment0/","section":"course","summary":"Purpose In this assignment, you will familiarize yourself with Postman, HTTP, and REST protocols using the Postman testing framework. You will also create your first node program and commit it to GitHub.","tags":null,"title":"Assignment Zero","type":"book"},{"authors":null,"categories":null,"content":"Purpose The purpose of this assignment is to set up your GitHub and Render instances for future assignments. You will create an Echo server, setup auto-deployment on Render, and test the server using Postman.\nPrerequisites Sign up for a free GitHub account if you don’t already have one. Accept GitHub Classroom – this should have been provided to you by your instructor. Classroom Assignment1 GitHub Classroom will clone the repository CSC3916_Assignment1 for you into your GitHub Classroom repository. Sign up for a free account on Render. Steps Step 1: Creating an Echo Server Navigate to the cloned repository on your GitHub Classroom repository. Create a new file server.js. Implement an Echo server using Node.js and Express.js. This server should respond with the same string it receives in a POST request. Step 2: Setting up Auto-deployment on Render Follow the steps in the Render guide to setup auto-deployment from your GitHub repository. Step 3: Creating a Postman Request Open Postman and create a new POST request to your Render-deployed Echo server.\nCreate an environment variable echo_body for the body of your request.\nIn the ‘Tests’ tab, write tests to validate the response such as status code, response body, and response time.\n// Check if the status code of the response is 200 pm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); // Check if the response time is less than 200ms pm.test(\u0026#34;Response time is less than 200ms\u0026#34;, function () { pm.expect(pm.response.responseTime).to.be.below(200); }); // Check if the response body is equal to the echo_body environment variable pm.test(\u0026#34;Response body is correct\u0026#34;, function () { pm.expect(pm.response.text()).to.equal(pm.environment.get(\u0026#34;echo_body\u0026#34;)); }); Step 4: Creating readme and Sharing Collection Create a readme.md file at the root of your GitHub repository. Share your Postman collection and include it in your readme. Make sure to include your environment settings. Step 5: Submission Commit and push all your changes to your GitHub repository. Submit the GitHub repository URL to Canvas. Rubric -5: Not deployed to Render. -5: Missing Postman Test. -1: For each missing assert (test). Resources Node.js Passport.js Documentation - Basic Digest Render Documentation - Deploy Node.js \u0026amp; Express.js app Creating an Echo Server in Node.js (YouTube Video) Deploy on render (YouTub Video) How to write tests in Postman (YouTube Video) Replace “your-collection-id” with the actual ID of your collection.\n","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"6f58cdeb3248d5919365bf74a705572d","permalink":"https://mccarthy.phd/course/web-api/assignment1/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment1/","section":"course","summary":"Purpose The purpose of this assignment is to set up your GitHub and Render instances for future assignments. You will create an Echo server, setup auto-deployment on Render, and test the server using Postman.","tags":null,"title":"Assignment One","type":"book"},{"authors":null,"categories":null,"content":"Purpose The purpose of this assignment is to start working with Node.js and become more familiar with HTTP requests.\nYou will create a standard Node.js server to handle incoming HTTP requests and then respond with information about the request. The server should be able to read incoming header and query parameters and include this information in the response. The server should also only accept certain incoming requests and block others.\nYou may use any of the standard packages included in Node.js or any third-party packages to complete this assignment.\nPrerequisites Basic knowledge of JavaScript Basic knowledge of Node.js Node.js installed on your local machine Access to GitHub Classroom Accept GitHub Classroom – this should have been provided to you by your instructor. Classroom Assignment 2 GitHub Classroom will clone the repository CSC3916_Assignment2 for you into your GitHub Classroom repository. Step-by-step Guide 1. Clone the Base Repository\nClone the base repository located at https://github.com/AliceNN-ucdenver/CSC3916_Assignment2 and create your own repository; GitHub classroom will do this when you accept the assigment\nThe scaffolding project contains the method to help you create the JSON object required for the HTTP response\nfunction getJSONObjectForMovieRequirement(req) { var json = { headers: \u0026#34;No headers\u0026#34;, key: process.env.UNIQUE_KEY, body: \u0026#34;No body\u0026#34; }; if (req.body != null) { json.body = req.body; } if (req.headers != null) { json.headers = req.headers; } return json; } 2. Create Environment Variable\nCreate an environment variable UNIQUE_KEY and set it to a unique value.\nFor local development, create a .env file (this file should be .gitignored and not stored in your repository). Create the environment variable on Heroku or Render for your app. 3. Install Required Packages\nEnsure that you have installed all required packages such as express, http, body-parser, passport, cors, and jsonwebtoken.\n4. Create Routes for Signup and Signin\nCreate two routes, /signup and /signin, to handle user registration and login. The scaffolding project contains implementation of these methods for you\nrouter.post(\u0026#39;/signup\u0026#39;, (req, res) =\u0026gt; { // Implementation here }); router.post(\u0026#39;/signin\u0026#39;, (req, res) =\u0026gt; { // Implementation here }); 5. Update /movies Route\nUpdate the /movies route in your server.js to handle GET, POST, PUT, and DELETE requests.\nHTTP Method: GET should return { status: 200, message: ‘GET movies”, headers: headers: header from request, query: query string from request, env: your unique key } HTTP Method: POST should return {“status”: 200, message: “movie saved”, headers: headers: header from request, query: query string from request, env: your unique key } HTTP Method: PUT should return {“status: 200, message: “movie updated”, headers: headers: header from request, query: query string from request , env: your unique key } PUT should require authentication (JWT Auth) HTTP Method: DELETE should return {“status: 200, message: “movie deleted”, headers: headers: header from request, query: query string from request, env: your unique key } Delete should require authentication (Basic Auth) All other methods should return error (e.g. PATCH) - it should respond with a simple statement saying it doesn’t support the HTTP method.\nrouter.route(\u0026#39;/movies\u0026#39;) .get((req, res) =\u0026gt; { // Implementation here }) .post((req, res) =\u0026gt; { // Implementation here }) .put(authJwtController.isAuthenticated, (req, res) =\u0026gt; { // HTTP PUT Method // Requires JWT authentication. // Returns a JSON object with status, message, headers, query, and env. var o = getJSONObjectForMovieRequirement(req); o.status = 200; o.message = \u0026#34;movie updated\u0026#34;; res.json(o); }) .delete(authController.isAuthenticated, (req, res) =\u0026gt; { // HTTP DELETE Method // Requires Basic authentication. // Returns a JSON object with status, message, headers, query, and env. var o = getJSONObjectForMovieRequirement(req); o.status = 200; o.message = \u0026#34;movie deleted\u0026#34;; res.json(o); }) .all((req, res) =\u0026gt; { // Any other HTTP Method // Returns a message stating that the HTTP method is unsupported. res.status(405).send({ message: \u0026#39;HTTP method not supported.\u0026#39; }); }); 6. Test Your Endpoints\nTest your endpoints with Postman. For each of the routes (GET, POST, PUT, DELETE), you should have tests that:\nInclude valid requests, as well as requests that fail (e.g., missing authentication, sending an incorrect HTTP verb). Include tests with BasicAuth set to the correct username/password and sets with wrong password. Include tests that sign in and retrieve the JWT token that is then used to call the PUT method on /movies. Here’s a hint on how you can do this in Postman:\nFor the sign-in test, create a request and store the token in the environment. Then use that token to call the PUT method on /movies. var data = JSON.parse(responseBody); postman.setEnvironmentVariable(\u0026#34;token\u0026#34;, data.token); 7. Share Your Postman Project\nShare your Postman project by creating a Postman Collection, running all the …","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"5668534ddf1a8b7c068775d33567be9c","permalink":"https://mccarthy.phd/course/web-api/assignment2/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment2/","section":"course","summary":"Purpose The purpose of this assignment is to start working with Node.js and become more familiar with HTTP requests.\nYou will create a standard Node.js server to handle incoming HTTP requests and then respond with information about the request.","tags":null,"title":"Assignment Two","type":"book"},{"authors":null,"categories":null,"content":"Purpose This assignment aims to enhance your understanding of NoSQL databases, particularly MongoDB. You will build a Users collection for storing user data and implement a signup and signin functionality. Additionally, you will also create a Movies collection to store movie information. All endpoints will be secured with JWT tokens obtained from successful signin operations.\nPrerequisites Basic knowledge of JavaScript Basic knowledge of Node.js Node.js installed on your local machine Access to GitHub Classroom Accept GitHub Classroom – this should have been provided to you by your instructor. Classroon Assignment3 GitHub Classroom will clone the repository CSC3916_Assignment3 for you into your GitHub Classroom repository. Steps Step 1: Create MongoDB Movie and User Collections\nCreate two MongoDB collections to store movie and user information.\nMovie Collection Schema:\nconst MovieSchema = new mongoose.Schema({ title: { type: String, required: true, index: true }, releaseDate: Date, genre: { type: String, enum: [ \u0026#39;Action\u0026#39;, \u0026#39;Adventure\u0026#39;, \u0026#39;Comedy\u0026#39;, \u0026#39;Drama\u0026#39;, \u0026#39;Fantasy\u0026#39;, \u0026#39;Horror\u0026#39;, \u0026#39;Mystery\u0026#39;, \u0026#39;Thriller\u0026#39;, \u0026#39;Western\u0026#39;, \u0026#39;Science Fiction\u0026#39; ], }, actors: [{ actorName: String, characterName: String, }], }); User Collection Schema (this is provided to you in the scaffolding project):\nconst UserSchema = new mongoose.Schema({ name: String, username: { type: String, unique: true }, password: String, // this should be hashed in real-world scenario }); Ensure that your Movies collection contains at least five movies.\nStep 2: NodeJS Web API\nCreate a NodeJS Web API to interact with your MongoDB database. This API should adhere to best practices, including having a separate route for each collection (e.g., /movies). The API should support all CRUD operations (GET, POST, PUT, DELETE).\nEnsure that incoming entities contain the necessary information. If a movie does not contain actors, for instance, the entity should not be created and an error should be returned instead.\nStep 3: User Authentication and JWT Token\nImplement JWT authentication for all your endpoints. To achieve this, you must also implement a User collection in MongoDB, each user document should include:\nname (String) username (String, unique) password (String, hashed) If a user tries to sign up with a username that already exists, return an error message stating that the user already exists.\nRemember to store your JWT secret key in an environment variable.\nStep 4: Implement Signup and Signin in the Frontend\nUpdate the existing pre-react CSC3916_REACT project to support /signup and /signin operations. The React Single Page App should interact with your Assignment 3 API for these operations.\nStep 5: Deploy Frontend to Static Site Service\nDeploy your updated React app to a static site hosting service, such as Render or Netlify. Make sure to set any necessary environment variables (such as API URLs) in the hosting service’s settings.\nMermaid Entity Relation Diagram classDiagram class Movie{ +String title +Date releaseDate +String genre +Array actors } class Actor{ +String actorName +String characterName } class User{ +String name +String username +String password } Movie \u0026#34;*\u0026#34; -- \u0026#34;3\u0026#34; Actor : contains #Route Details\nRoute GET POST PUT DELETE movies Return all movies save a single movie FAIL FAIL movies/:movieparameter Return a specific movie based on the :movieparameter FAIL Update the specific movie based on the :movieparameter in your case it’s the title Delete the specific movie based on the :movieparamters your case it’s the title If Query String (Later Homework) reviews=true aggregate in reviews Sorry for the interruption, here’s the completed markdown:\nSubmissions All source code should be hosted on GitHub. Remember to exclude the node_modules directory using a .gitignore file. Your API should be deployed to either Heroku or Render. A Postman collection including the following tests: Signup a user (create a random username and password in your pre-test) Signin a user – parse the returned JWT token and store it as a Postman environment variable Separate requests for each endpoint (save a movie, update a movie, delete a movie, and get a movie) Test error conditions (e.g., user already exists, movie missing required information) Create a readme.md file at the root of your GitHub repository. Embed your Postman collection using markdown. Submit the URL of your GitHub repository to the CSC_3916 assignment on Canvas. Note: All tests should target your Heroku or Render endpoint.\nRubric -5 for missing REACT site (-2 if you are not able to signup or signin on the react site) that is all we implemented -1 for MovieSchema missing any of the attributes (array of actors, genre, year released, or title) -2 for missing routes for /movies (POST/PUT/DELETE/GET) -1 for missing authentication on routes -2 for not deployed on Heroku/Render -1 missing test error conditions -1 missing PostMan tests (signup, signin, separate call for each route) Resources MongoDB Cloud Atlas Create a Free …","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"8939f52dc04e7f9ad1e165a74222eb46","permalink":"https://mccarthy.phd/course/web-api/assignment3/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment3/","section":"course","summary":"Purpose This assignment aims to enhance your understanding of NoSQL databases, particularly MongoDB. You will build a Users collection for storing user data and implement a signup and signin functionality. Additionally, you will also create a Movies collection to store movie information.","tags":null,"title":"Assignment Three","type":"book"},{"authors":null,"categories":null,"content":"Purpose Using the information already entered to MongoDB for the previous assignment, you will add another collection of reviews that are tied to the movies. This way users can query the database and get the previous information (title, year released and actors) as well as the reviews.\nThe purpose of this assignment is to leverage Google’s analytics policies to gather information about the requests being sent in by users.\nPre-requisites Basic knowledge of JavaScript and Node.js MongoDB account and basic understanding of MongoDB and Mongoose Google Analytics account Postman for testing APIs Git and GitHub for version control Basic knowledge of deployment to Heroku or Render Source code from Assignment3 Access to Classroom GitHub Classroom will clone the repository CSC3916_Assignment4 for you into your GitHub Classroom repository. Step 1: Create a new Collection for Reviews In your MongoDB database, create a new collection named Reviews to hold reviews about movies. Each review should contain the following fields:\nmovieId: from the Movies collection username: name of the reviewer review: the actual review text rating: rating out of five stars given by the reviewer classDiagram class Review { +ObjectId _id +String movieId +String username +String review +Number rating } Here’s an example of a Mongoose schema for the Review:\nconst reviewSchema = new mongoose.Schema({ movieId: { type: mongoose.Schema.Types.ObjectId, ref: \u0026#39;Movie\u0026#39; }, username: String, review: String, rating: { type: Number, min: 0, max: 5 } }); Step 2: Update API to Include Reviews Your API from assignment 3 should be updated to interact with the Reviews collection. It should support GET and POST operations for reviews, with DELETE being optional. The POST operation should be secured with a JWT authorization token.\nIf review created send back JSON message { message: \u0026#39;Review created!\u0026#39; } Step 3: Implement Aggregation of Reviews and Movies If the user sends a request with the query parameter reviews=true, the response should include the movie information as well as all the reviews for the movie. This aggregation can be done using MongoDB’s $lookup operator or Async.js library.\nHere’s a quick example of how you could use $lookup in Mongoose to aggregate data from Items and Orders collections:\nOrder.aggregate([ { $match: { _id: orderId } // replace orderId with the actual order id }, { $lookup: { from: \u0026#34;items\u0026#34;, // name of the foreign collection localField: \u0026#34;items\u0026#34;, // field in the orders collection foreignField: \u0026#34;_id\u0026#34;, // field in the items collection as: \u0026#34;itemDetails\u0026#34; // output array where the joined items will be placed } } ]).exec(function(err, result) { if (err) { // handle error } else { console.log(result); } }); Step 4: Add Custom Analytics (Extra Credit) Create a custom analytics policy that describes the number of times each movie has been reviewed.\nCreate a custom analytics policy that describes the number of times each movie has been reviewed. To do this, you will have to send a number of requests for each movie. Custom Dimension: Movie Name Custom Metric: Requested: Value 1 (it will aggregate) Custom Dimension and Metric should be sent with an Event type Event Category: Genre of Movie (e.g. Western) Event Action: Url Path (e.g. post /reviews) Event Label: API Request for Movie Review Event Value: 1 To open up the screens on Google Analytics you need to implement the first property: https://support.google.com/analytics/answer/10269537Links to an external site.\nAlso it takes awhile for events to show up (for it to index) so don’t worry if you don’t see your events immediately.\nvar express = require(\u0026#39;express\u0026#39;); var bodyParser = require(\u0026#39;body-parser\u0026#39;); const crypto = require(\u0026#34;crypto\u0026#34;); var rp = require(\u0026#39;request-promise\u0026#39;); var app = express(); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: false })); var router = express.Router(); const GA_TRACKING_ID = process.env.GA_KEY; function trackDimension(category, action, label, value, dimension, metric) { var options = { method: \u0026#39;GET\u0026#39;, url: \u0026#39;https://www.google-analytics.com/collect\u0026#39;, qs: { // API Version. v: \u0026#39;1\u0026#39;, // Tracking ID / Property ID. tid: GA_TRACKING_ID, // Random Client Identifier. Ideally, this should be a UUID that // is associated with particular user, device, or browser instance. cid: crypto.randomBytes(16).toString(\u0026#34;hex\u0026#34;), // Event hit type. t: \u0026#39;event\u0026#39;, // Event category. ec: category, // Event action. ea: action, // Event label. el: label, // Event value. ev: value, // Custom Dimension cd1: dimension, // Custom Metric cm1: metric }, headers: { \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39; } }; return rp(options); } router.route(\u0026#39;/test\u0026#39;) .get(function (req, res) { // Event value must be numeric. trackDimension(\u0026#39;Feedback\u0026#39;, \u0026#39;Rating\u0026#39;, \u0026#39;Feedback for Movie\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;Guardian\\\u0026#39;s of the Galaxy 2\u0026#39;, \u0026#39;1\u0026#39;) .then(function (response) { console.log(response.body); res.status(200).send(\u0026#39;Event tracked.\u0026#39;).end(); }) }); app.use(\u0026#39;/\u0026#39;, router); console.log(\u0026#34;http://localhost:8080/test\u0026#34;); …","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"43e843e4bf5c54ed38337579a04f346a","permalink":"https://mccarthy.phd/course/web-api/assignment4/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment4/","section":"course","summary":"Purpose Using the information already entered to MongoDB for the previous assignment, you will add another collection of reviews that are tied to the movies. This way users can query the database and get the previous information (title, year released and actors) as well as the reviews.","tags":null,"title":"Assignment Four","type":"book"},{"authors":null,"categories":null,"content":"Purpose The objective of this assignment is to create a React Single Page Application that interacts with your previously developed API. The application will enable users to search for movies, display information about a selected movie, view stored ratings, and submit a new rating for a movie.\nPre-Requirements Completion and deployment of Assignment 3 (React app supporting SignUp and Logon) Completion and deployment of Assignment 4 (API supporting reviews) Source code from REACT from earlier assignment3 Classroom Classroom Detailed Steps 1. Updating API to Include Movie Images Expand your MongoDB movie collection by adding a new attribute to store the URL of a movie’s image. Update your Movie schema in Mongoose accordingly: const MovieSchema = new mongoose.Schema({ title: { type: String, required: true, index: true }, releaseDate: Date, genre: { type: String, enum: genres }, actors: [ActorSchema], imageUrl: String, // rest of your fields }); 2. Securing All Endpoints with JWT For this assignment, make sure all your API endpoints are protected with JWT authentication. 3. Implementing User Interfaces User SignUp and Logon Interface\nUtilize your User MongoDB collection to facilitate the storage of new users. Your React application should provide interfaces for users to sign up (with name, username, password) and log in (with username, password). Main Screen\nDisplay the top-rated movies on the main screen of your React application. Your GET /movies endpoint should sort the results by average rating (server-side). Update your /movies (with reviews=true) endpoint to sort by average rating in descending order. Implement this feature in your API and consume this API in your React application to show the sorted movies. const aggregate = [ { $lookup: { from: \u0026#39;reviews\u0026#39;, localField: \u0026#39;_id\u0026#39;, foreignField: \u0026#39;movieId\u0026#39;, as: \u0026#39;movieReviews\u0026#39; } }, { $addFields: { avgRating: { $avg: \u0026#39;$movieReviews.rating\u0026#39; } } }, { $sort: { avgRating: -1 } } ]; Movie.aggregate(aggregate).exec(function(err, docs) { ... }); Movie Detail Screen Design a movie detail screen that shows the Movie, Image, Actors in the movie, and the aggregated rating for the movie. Use MongoDB’s aggregation framework to compute the average rating of reviews. A grid should display the reviews (username, rating, review). When a movie is selected from the main screen, the movie detail screen should be shown. const aggregate = [ { $match: { _id: movieId } }, { $lookup: { from: \u0026#39;reviews\u0026#39;, localField: \u0026#39;_id\u0026#39;, foreignField: \u0026#39;movieId\u0026#39;, as: \u0026#39;movieReviews\u0026#39; } }, { $addFields: { avgRating: { $avg: \u0026#39;$movieReviews.rating\u0026#39; } } } ]; Movie.aggregate(aggregate).exec(function(err, doc) { ... }); Extra Credit (7 points) Implement a movie search feature that displays results in a grid or accordion. For this, add a Search API (HTTP POST) to the API that can accept partial movie names or partial actor names. Beginning MERN Stack: Build and Deploy a Full Stack MongoDB, Express, React, Node.js App Step 4: Deployment Deploy your React application on a platform like Heroku, Render, Vercel, or Netlify. Make sure the deployed application is able to communicate with your API. Step 5: Submission User is able to sign-up (name, username, password). User is able to log in to the application (username, password). User is able to see a list of movies and select a movie to see the detail screen (top-rated movies displayed). User is able to enter a review on the detail page (enter a rating and comment) – the logged-in user’s username will be associated with the review (as captured from the JSON Web Token). Rubric -3 Not able to add comments -2 Not aggregating rating (average rating) -3 if not pointed to the correct endpoint (e.g., HW4 endpoint) -5 if you don’t have a React website deployed Resources Create React App React Buildpack Mongoose Aggregate ","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"9154a085d8992a264d6b3e998741b2e2","permalink":"https://mccarthy.phd/course/web-api/assignment5/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment5/","section":"course","summary":"Purpose The objective of this assignment is to create a React Single Page Application that interacts with your previously developed API. The application will enable users to search for movies, display information about a selected movie, view stored ratings, and submit a new rating for a movie.","tags":null,"title":"Assignment Five","type":"book"},{"authors":["Shawn McCarthy","Gita Alaghband"],"categories":null,"content":"","date":1700524800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1700524800,"objectID":"46be9356456141122ade9b5740c32a76","permalink":"https://mccarthy.phd/publication/mccarthy-emotion-2023/","publishdate":"2023-11-21T10:34:00Z","relpermalink":"/publication/mccarthy-emotion-2023/","section":"publication","summary":"During the volatile market period of 2019–2021, characterized by geopolitical shifts, economic sanctions, pandemics, natural disasters, and wars, the global market presented a complex landscape for financial decision making and motivated this study. This study makes two groundbreaking and novel contributions. First, we augment Plunket’s emotional research and leverage the emotional classification algorithm in Fin-Emotion to introduce a novel quantitative metric, “emotion magnitude”, that captures the emotional undercurrents of the market. When integrated with traditional time series analysis using Temporal Convolutional Networks applied to stock market futures, this metric offers a more holistic understanding of market dynamics. In our experiments, incorporating it as a feature led to significantly better performance on both the training and validation sets (9.26\\%, 52.11\\%) compared to traditional market-based risk measures, in predicting futures market trends based on the commodities and supply chains analyzed. Second, we deploy a multidimensional data science framework that synthesizes disparate data streams and analyses. This includes stock metrics of sector-leading companies, the time horizon of significant market events identified based on company stock data, and the extraction of further knowledge concepts identified through “emotion magnitude” analysis. Our approach stitches together countries, commodities, and supply chains identified in the targeted news search and identifies the domestic companies impacted based on the time horizon of these emotional supply chain events. This methodology culminates in a unified knowledge graph that not only highlights the relationships between supply chain disruptions, affected corporations, and commodities but also quantifies the broader systemic implications of such market events that are revealed. Collectively, these innovations form a robust analytical tool for financial risk strategy, empowering stakeholders to navigate an ever-evolving financial global ecosystem with enhanced insights. This graph encapsulates multi-dimensional forces and enables stakeholders to anticipate and understand the broader causal implications of related supply chain and market events (such as economic sanctions’ impact on the energy, technology, and telecommunication sectors).","tags":["NLP","emotional sentiment analysis","supply chain","financial news","knowledge graph"],"title":"The Emotion Magnitude Effect: Navigating Market Dynamics Amidst Supply Chain Events","type":"publication"},{"authors":[],"categories":[],"content":"Introduction to GitHub GitHub | Documentation\nWhat is GitHub? A platform for version control and collaboration It allows you and others to work on projects from anywhere Setting Up GitHub Go to GitHub.com Click on Sign Up Fill in your details and click Create account Creating a New Repository After logging in, click on New repository Name your repository Choose to make the repository Public or Private Make sure the default branch name is main Click Create repository Cloning a Repository Navigate to the main page of the repository Click Code To clone the repository using HTTPS, under “Clone with HTTPS”, click the clipboard icon Open Git Bash Change the current working directory to the location where you want the cloned directory Type git clone, and then paste the URL you copied earlier Press Enter to create your local clone Making Changes Navigate to the file in your repository that you want to change Click the pencil icon in the upper right corner of the file view to edit Make and commit your changes Creating a .gitignore File In your repository, create a new file named .gitignore For a Node.js project, you might include the following in your .gitignore: node_modules/ npm-debug.log .DS_Store .env About .env and .gitignore .env files usually contain sensitive information like API keys and should not be tracked in Git Including .env in your .gitignore ensures it won’t be committed to your GitHub repository Instead, provide a .env.example file with the required keys and dummy values to guide others Pushing Changes Open a terminal Navigate to your repository directory Type git add . to add all changes Type git commit -m \u0026#34;Your message\u0026#34; to commit changes Type git push to push changes to GitHub Pulling Changes Open a terminal Navigate to your repository directory Type git pull to update your local repository with the latest changes Issues Issues are a great way to keep track of tasks, enhancements, and bugs for your projects\nNavigate to the main page of the repository Click Issues Click New issue Create a title and write a description for your issue Click Submit new issue Pull Requests Pull requests let you tell others about changes you’ve pushed to a branch in a repository on GitHub\nNavigate to the main page of the repository Click Pull requests Click New pull request Select the branch you made changes to and the branch you want to merge changes into 5. Review your changes and click Create pull request\nQuestions? Ask Documentation\n","date":1684713600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684713600,"objectID":"eb38b282114a1dba4ce47446a8fca7ce","permalink":"https://mccarthy.phd/slides/github/","publishdate":"2023-05-22T00:00:00Z","relpermalink":"/slides/github/","section":"slides","summary":"A beginner's guide to GitHub","tags":[],"title":"GitHub Introduction","type":"slides"},{"authors":null,"categories":null,"content":"The GPT-4 PDF Chatbot LangChain repository is a powerful tool that uses the GPT-4 API to build a chatGPT chatbot for multiple large PDF files. It leverages technologies like LangChain, Pinecone, TypeScript, OpenAI, and Next.js to achieve this. LangChain is a framework that makes it easier to build scalable AI/LLM apps and chatbots, while Pinecone serves as a vector store for storing embeddings and your PDF in text to later retrieve similar doc\nHowever, we’re going to make some changes to the repository. We’ll be removing Pinecone and updating it to Faiss. Here’s how you can do that:\nInstall Faiss Node Run npm install faiss-node@0.1.1 to add Faiss Node to your project.\nUpdate /scripts/ingest-data.ts Replace the Pinecone lines with:\nimport { FaissStore } from \u0026#34;langchain/vectorstores/faiss\u0026#34;; And update the document loading process as follows:\n// Load the docs into the vector store const vectorStore = await FaissStore.fromDocuments( docs, new OpenAIEmbeddings() ); await vectorStore.save(\u0026#39;./index\u0026#39;); Update utils/makechain.ts Replace the Pinecone lines with:\nimport { FaissStore } from \u0026#34;langchain/vectorstores/faiss\u0026#34;; And update the chain creation process as follows:\nexport const makeChainFaiss = (vectorstore: FaissStore) =\u0026gt; { const model = new OpenAI({ temperature: 0, // increase temepreature to get more creative answers modelName: \u0026#39;gpt-3.5-turbo\u0026#39;, //change this to gpt-4 if you have access }); const chain = ConversationalRetrievalQAChain.fromLLM( model, vectorstore.asRetriever(), { qaTemplate: QA_PROMPT, questionGeneratorTemplate: CONDENSE_PROMPT, returnSourceDocuments: true, //The number of source documents returned is 4 by default }, ); return chain; }; Update pages/api/chat.ts Replace the Pinecone lines with:\nimport { makeChain, makeChainFaiss } from \u0026#39;@/utils/makechain\u0026#39;; import { FaissStore } from \u0026#34;langchain/vectorstores/faiss\u0026#34;; And add the following to load the vector store and create the chain:\n// Load the vector store from the same directory const loadedVectorStore = await FaissStore.load( \u0026#39;./index\u0026#39;, new OpenAIEmbeddings() ); //create chain const chainFaiss = makeChainFaiss(loadedVectorStore); //Ask a question using chat history const response = await chainFaiss.call({ question: sanitizedQuestion, chat_history: history || [], }); Set up your .env file You will need to add your Azure OpenAI Service details to your .env file. This should include your Azure OpenAI API Key, instance name, deployment name, completions deployment name, embeddings deployment name, and API version. The entries in your .env file should look something like this:\nAZURE_OPENAI_API_KEY=\u0026#34;...\u0026#34; AZURE_OPENAI_API_INSTANCE_NAME=\u0026#34;...\u0026#34; AZURE_OPENAI_API_DEPLOYMENT_NAME=\u0026#34;...\u0026#34; AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME=\u0026#34;...\u0026#34; AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME=\u0026#34;...\u0026#34; AZURE_OPENAI_API_VERSION=\u0026#34;...\u0026#34; Here’s where you can find each piece of information:\nAZURE_OPENAI_API_KEY: This can be found on the resource page for the Azure OpenAI resource Key and Endpoint section. AZURE_OPENAI_API_INSTANCE_NAME: This is the name of the Azure OpenAI resource. For example, in my case, it’s ucdenver-azure-openai. AZURE_OPENAI_API_DEPLOYMENT_NAME: This is the main model you deployed. For example, in my case, I deployed gpt-35-turbo and named it gpt-35. AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME: This should be the same as your AZURE_OPENAI_API_DEPLOYMENT_NAME. AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME: This is the embeddings model you deployed. For example, in my case, I deployed text-embedding-ada-002 and named it text-embedding. AZURE_OPENAI_API_VERSION: This is the current version of the API. As of now, it’s 2023-05-15. More information can be found here. Test in postman\nGET https://ucdenver-azure-openai.openai.azure.com/openai/models?api-version=2023-05-15 this will give you models and capabilities - remember to set the api-key POST https://ucdenver-azure-openai.openai.azure.com/openai/deployments/text-embedding/embeddings?api-version=2023-05-15 this will give you the embeddings {\u0026#34;model\u0026#34;:\u0026#34;text-embedding\u0026#34;,\u0026#34;input\u0026#34;:\u0026#34;test\u0026#34;} This should complete the update of your GPT-4 PDF Chatbot LangChain repository to use Faiss instead of Pinecone.\n","date":1684454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684454400,"objectID":"cc02debf25788a0e9e6a508ffc5ee2b6","permalink":"https://mccarthy.phd/project/langchain/","publishdate":"2023-05-19T00:00:00Z","relpermalink":"/project/langchain/","section":"project","summary":"Changes to gpt4-pdf-chatbot-langchain","tags":["LangChain"],"title":"Updating the GPT-4 PDF Chatbot LangChain Repository (mayooear)","type":"project"},{"authors":[],"categories":null,"content":"","date":1684231200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684231200,"objectID":"26a574271c42195a0e8e02914be8e2a3","permalink":"https://mccarthy.phd/talk/enhancing-financial-market-analysis-and-prediction-with-emotion-corpora-and-news-co-occurrence-network/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/talk/enhancing-financial-market-analysis-and-prediction-with-emotion-corpora-and-news-co-occurrence-network/","section":"event","summary":"This work seeks to develop a novel approach for understanding how news analysis and global events influence market sentiment and performance across various sectors.","tags":[],"title":"Enhancing Financial Market Analysis and Prediction with Emotion Corpora and News Co-Occurrence Network","type":"event"},{"authors":["Shawn McCarthy","Gita Alaghband"],"categories":null,"content":"","date":1680307200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680307200,"objectID":"ebcb0f22ea5dd3c90a9f6e0ba20693f8","permalink":"https://mccarthy.phd/publication/mccarthy-enhancing-2023/","publishdate":"2023-05-20T16:38:03.042667Z","relpermalink":"/publication/mccarthy-enhancing-2023/","section":"publication","summary":"This study employs an improved natural language processing algorithm to analyze over 500,000 financial news articles from sixteen major sources across 12 sectors, with the top 10 companies in each sector. The analysis identifies shifting economic activity based on emotional news sentiment and develops a news co-occurrence network to show relationships between companies even across sectors. This study created an improved corpus and algorithm to identify emotions in financial news. The improved method identified 18 additional emotions beyond what was previously analyzed. The researchers labeled financial terms from Investopedia to validate the categorization performance of the new method. Using the improved algorithm, we analyzed how emotions in financial news relate to market movement of pairs of companies. We found a moderate correlation (above 60%) between emotion sentiment and market movement. To validate this finding, we further checked the correlation coefficients between sentiment alone, and found that consumer discretionary, consumer staples, financials, industrials, and technology sectors showed similar trends. Our findings suggest that emotional sentiment analysis provide valuable insights for financial market analysis and prediction. The technical analysis framework developed in this study can be integrated into a larger investment strategy, enabling organizations to identify potential opportunities and develop informed strategies. The insights derived from the co-occurrence model may be leveraged by companies to strengthen their risk management functions, making it an asset within a comprehensive investment strategy.","tags":["co-occurrence graph","emotional sentiment analysis","financial news","NLP"],"title":"Enhancing Financial Market Analysis and Prediction with Emotion Corpora and News Co-Occurrence Network","type":"publication"},{"authors":[],"categories":null,"content":"","date":1678708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678708800,"objectID":"04a7591545c04c325c0b8b602ddf1558","permalink":"https://mccarthy.phd/talk/recommender-systems-hands-on-workshop-training-wide-and-deep-recommenders-day-2/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/talk/recommender-systems-hands-on-workshop-training-wide-and-deep-recommenders-day-2/","section":"event","summary":"This online workshop consists of presentations \u0026 labs covering the fundamental techniques \u0026 tools for building highly effective recommender systems from matrix based recommender systems to wide \u0026 deep network models.","tags":[],"title":"Recommender Systems Hands on Workshop | Training Wide and Deep Recommenders | Day 2","type":"event"},{"authors":[],"categories":null,"content":"","date":1678449600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678449600,"objectID":"493da389825a9da2ab6173f22b215f99","permalink":"https://mccarthy.phd/talk/recommender-systems-hands-on-workshop/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/talk/recommender-systems-hands-on-workshop/","section":"event","summary":"This online workshop consists of presentations \u0026 labs covering the fundamental techniques \u0026 tools for building highly effective recommender systems from matrix based recommender systems to wide \u0026 deep network models.","tags":[],"title":"Recommender Systems Hands on Workshop","type":"event"},{"authors":null,"categories":null,"content":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders …","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://mccarthy.phd/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post"},{"authors":["Shawn McCarthy"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://mccarthy.phd/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://mccarthy.phd/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]