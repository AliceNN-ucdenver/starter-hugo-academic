[{"authors":null,"categories":null,"content":"Shawn McCarthy, an AI Committee Member and Manulife‚Äôs VP of Global Architecture, Big Data, and Information Risk, is pursuing a PhD focused on the impact of global events on market sentiment. His research expands upon a previous study (https://www.mdpi.com/1911-8074/16/4/226) and aims to uncover connections between world events, producing countries, and their financial markets. Shawn‚Äôs work seeks to develop a novel approach for understanding how news analysis and global events influence market sentiment and performance across various sectors. By creating a comprehensive model for market prediction and risk management, he aims to help organizations navigate the complexities of financial markets in an interconnected global economy. As a Graduate Instructor at the University of Colorado, Shawn is driven by his motto, ‚ÄúInspire Growth,‚Äù and committed to fostering innovation in others.\n","date":1549324800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1567641600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Shawn McCarthy, an AI Committee Member and Manulife‚Äôs VP of Global Architecture, Big Data, and Information Risk, is pursuing a PhD focused on the impact of global events on market sentiment.","tags":null,"title":"Shawn McCarthy","type":"authors"},{"authors":null,"categories":null,"content":" Table of Contents Course Syllabus Spring, 2024 Course Outline: Courses in this program Meet your instructor FAQs CSCI 3916: Web API Technologies Course Syllabus Spring, 2024 Instructor: Shawn McCarthy\nEmail: shawn.mccarthy@ucdenver.edu\nPhone: (303) 900-8613\nClass: Microsoft Teams / 330PM (Monday)\nOffice Hours: 445pm-545pm M/W Teams\nCatalog Data: Topics in JavaScript Web technologies for front-end development and back-end development. Building a full end to end solution with a mobile or web front-end, Web API and NoSQL database\nCo-requisites: N/A\nPrerequisites: CSCI 2421-3 Data Structures \u0026amp; Program Design\nNote: Each student must sign and return the attached Prerequisites Agreement form to receive any credit for any assignment or exam. If this form is not returned by the 1st week, the student will be administratively dropped from the course.\nExpected Knowledge at the Start of the Course:\nData structures for simplifying algorithm design Expected Knowledge Gained at the end of the Course:\nSolid understanding of JavaScript, NodeJS, Development of Web APIs, NoSQL Databases and React front-end complete solution ABET Assessment Criteria:\n(k) An ability to apply design and development principles in the construction of software systems of varying complexity Course Objectives: Full stack development (GitHub, Unit Testing, Integration Testing) focused on building Web APIs.\nTextbook:\nFull-Stack React Projects MERN Projects for Beginners (Only if you choose to do an individual project) Optional: Beginning MERN Stack Optional: Learning JavaScript Topics: Web APIs (Design, Best Practices and Development). JavaScript, NodeJS, TypeScript, React, MongoDB\nCourse Outline: Lecture/Week Date Topic Reading Assignments 1 Jan 17th GitHub, PostMan MERN: Chapter 1 MERN Setup, Full Stack: Preparing the Development Environment, Link 2 Jan 22nd HTTP Learn JavaScript - Full Course for Beginners Hw0 Due Jan 28th 3 Jan 29th ES6/JavaScript, Heroku, Pick Teams The Modern JavaScript Tutorial Hw1 Due Feb 4th 4 Feb 5th NodeJS, Authorization, Basic Auth, oAuth Full Stack: Auth with JWT 5 Feb 12th Swagger, Node Security, Unit Testing, Pre-React Getting Started with React - Quick Start and Tutorial 6 Feb 19th API Design / Swagger / Best Practices, React Auth Full Stack: Following Best practices, Full Stack: Adding a React Frontend Hw2 Due Feb 25th 7 Feb 26th MongoDB Full Stack: Building a Backend with MongoDB 8 Mar 4th API Management, TypeScript Hw3 Due Mar 10th 9 Mar 11th Analytics, Code Smells (Spec topic) YouTube 10 Mar 18th Spring Break 11 Mar 25th CSS Hw4 Due Mar 31st 12 Apr 1st React Movie, Patterns (Spec Topic) 13 Apr 8th React Hw5 Due Apr 14th 14 Apr 15th Mobile, Monetization 15 April 22nd Project Days 16 April 29th Project Presentations Grading Policy:\nHomework: 65% Projects: 35% Notes: UCD Code of Honor as in the catalog: UCD Honor Code\nProjects (you can work individual or as a team of up to 5)\nIndividual Projects: MERN Projects for Beginners (any one of the 5 applications) with one additional feature added (your proposal should include what you are going to add to one of the project ideas) Team Projects: Full Stack React: See Online Marketplace (with extending marketplace for orders and payment) example and build in the additional capabilities Mental Health Resources: CU Denver faculty and staff understand the stress and pressure of college life. Students experiencing symptoms of anxiety, depression, substance use, loneliness or other issues affecting their mental well-being, have access to campus support services such as the Student and Community Counseling Center, the Wellness Center and the Office of Case Management. Students also have access to the You@CUDenver on-line well-being platform available 24/7. More information about mental health education and resources can be found at Lynx Central and CU Denver‚Äôs Health \u0026amp; Wellness page. Students in imminent crisis can contact Colorado Crisis Services for immediate assistance 24/7 or walk-in to the counseling center during regular business hours.\nCourses in this program Assignment Zero Assignment Zero Purpose In this assignment, you will familiarize yourself with Postman, HTTP, and REST protocols using the Postman testing framework. You will also create your first node program and commit it to GitHub.\nAssignment One Assignment One Purpose The purpose of this assignment is to set up your GitHub and Render instances for future assignments. You will create an Echo server, setup auto-deployment on Render, and test the server using Postman.\nMeet your instructor Shawn McCarthy FAQs Are there prerequisites? There are no prerequisites for the first course.\nHow often do the courses run? Continuously, at your own pace.\nBegin the course ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"281c106c6081a8571d1e47bc96a23fce","permalink":"https://mccarthy.phd/course/web-api/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/course/web-api/","section":"course","summary":"CSC3916 Web API Technologies","tags":["current"],"title":"üìä Learn Web APIs","type":"book"},{"authors":null,"categories":null,"content":"Assignment Zero Purpose In this assignment, you will familiarize yourself with Postman, HTTP, and REST protocols using the Postman testing framework. You will also create your first node program and commit it to GitHub. Your task will be to create a Postman collection and automate REST tests within the project. Each test should include the required assertions.\nPrerequisites Create a free account on GitHub. Accept GitHub Classroom ‚Äì this should have been provided to you by your instructor. GitHub Classroom will clone the repository CSC3916_Assignment0 for you into your GitHub Classroom repository. Download an Integrated Development Environment (IDE). We recommend WebStorm or VSCode. Download the desktop version of Postman. Steps Step 1: Creating a REST Request Open Postman. Click on the ‚ÄòNew‚Äô button and select ‚ÄòRequest‚Äô. Name your request (for instance ‚ÄòBook Search‚Äô) and select or create a new collection to store this request. Set the request method to ‚ÄòGET‚Äô. Set the request URL to https://www.googleapis.com/books/v1/volumes?q={{book_title}}. In the ‚ÄòTests‚Äô tab, add the asserts for the request validation. Step 2: Setting up the Environment Variable and Writing Tests Click on the settings gear icon on the top right of Postman, then click ‚ÄòManage Environments‚Äô.\nClick ‚ÄòAdd‚Äô to create a new environment. Name your environment (for instance ‚ÄòBook Search Env‚Äô).\nCreate a new variable named ‚Äòbook_title‚Äô and set the initial value to ‚ÄòTuring‚Äô.\nIn the Tests tab, write tests to validate the response. For instance:\npm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); pm.test(\u0026#34;Book title or description includes Turing\u0026#34;, function () { var jsonData = pm.response.json(); for (var i = 0; i \u0026lt; jsonData.items.length; i++) { if (/(turing)/i.test(jsonData.items[i].volumeInfo.title) || /(turing)/i.test(jsonData.items[i].volumeInfo.description)) { pm.environment.set(\u0026#34;book_id\u0026#34;, jsonData.items[i].id); break; } } }); Step 3: Chaining Requests Create a new request as in Step 1. Set the request URL to https://www.googleapis.com/books/v1/volumes/{{book_id}}. Similar to Step 2, write tests to validate the response. Step 4: Modifying googlebooks.js Open your IDE and navigate to /utils/googlebooks.js.\nModify the method to return an object like:\n{ data: response.data, status: response.status, statusText: response.statusText, headers: response.headers, requestHeader: response.config.headers } Step 5: HTTP Headers Analysis Investigate the HTTP headers in the request and response from the Postman console. Create a new text file named headers.txt. Write a brief description of each key-value pair in the HTTP headers in the request and response. Save the file and check it into your GitHub repository with the rest of the project. Submission Create a readme.md file at the root of your GitHub repository. Within your Postman collection, click on the arrow next to the collection name, then select ‚ÄòShare‚Äô. In the Share dialog, select ‚ÄòEmbed‚Äô. Make sure to include your environment in the share by clicking ‚ÄòEnvironment‚Äô and selecting the correct one. Choose the ‚ÄòMarkdown‚Äô tab. Click ‚ÄòCopy to Clipboard‚Äô and paste this into your readme.md file. Commit and push the updated googlebooks.js file to your GitHub repository. Commit and push the headers.txt file containing your HTTP headers analysis to your GitHub repository. Rubric -10 points: homework not uploaded. -2 points: missing Postman button in readme.md. -2 points: missing check in request 1 for checking title and description in items. -2 points: missing ID check in request 2. -2 points: missing change in utils/googlebooks.js (adding new object). -2 points: missing text file with request headers. Resources Creating a Test in Postman (YouTube Video) Sharing a Live Version in Postman (YouTube Video) Postman Learning Center: Writing tests Postman Learning Center: Sharing collections Replace ‚Äúyour-collection-id‚Äù with the actual ID of your collection.\n","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"61fa96be9b783440df08b5d54fcdd2c9","permalink":"https://mccarthy.phd/course/web-api/assignment0/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment0/","section":"course","summary":"Assignment Zero Purpose In this assignment, you will familiarize yourself with Postman, HTTP, and REST protocols using the Postman testing framework. You will also create your first node program and commit it to GitHub.","tags":null,"title":"Assignment Zero","type":"book"},{"authors":null,"categories":null,"content":"Assignment One Purpose The purpose of this assignment is to set up your GitHub and Render instances for future assignments. You will create an Echo server, setup auto-deployment on Render, and test the server using Postman.\nPrerequisites Sign up for a free GitHub account if you don‚Äôt already have one. GitHub Classroom will clone the repository CSC3916_Assignment1 for you into your GitHub Classroom repository. Sign up for a free account on Render. Steps Step 1: Creating an Echo Server Navigate to the cloned repository on your GitHub Classroom repository. Create a new file server.js. Implement an Echo server using Node.js and Express.js. This server should respond with the same string it receives in a POST request. Step 2: Setting up Auto-deployment on Render Follow the steps in the Render guide to setup auto-deployment from your GitHub repository. Step 3: Creating a Postman Request Open Postman and create a new POST request to your Render-deployed Echo server.\nCreate an environment variable echo_body for the body of your request.\nIn the ‚ÄòTests‚Äô tab, write tests to validate the response such as status code, response body, and response time.\n// Check if the status code of the response is 200 pm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); // Check if the response time is less than 200ms pm.test(\u0026#34;Response time is less than 200ms\u0026#34;, function () { pm.expect(pm.response.responseTime).to.be.below(200); }); // Check if the response body is equal to the echo_body environment variable pm.test(\u0026#34;Response body is correct\u0026#34;, function () { pm.expect(pm.response.text()).to.equal(pm.environment.get(\u0026#34;echo_body\u0026#34;)); }); Step 4: Creating readme and Sharing Collection Create a readme.md file at the root of your GitHub repository. Share your Postman collection and include it in your readme. Make sure to include your environment settings. Step 5: Submission Commit and push all your changes to your GitHub repository. Submit the GitHub repository URL to Canvas. Rubric -5: Not deployed to Render. -5: Missing Postman Test. -1: For each missing assert (test). Resources Node.js Passport.js Documentation - Basic Digest Render Documentation - Deploy Node.js \u0026amp; Express.js app Creating an Echo Server in Node.js (YouTube Video) How to write tests in Postman (YouTube Video) Replace ‚Äúyour-collection-id‚Äù with the actual ID of your collection.\n","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"6f58cdeb3248d5919365bf74a705572d","permalink":"https://mccarthy.phd/course/web-api/assignment1/","publishdate":"2023-05-01T00:00:00Z","relpermalink":"/course/web-api/assignment1/","section":"course","summary":"Assignment One Purpose The purpose of this assignment is to set up your GitHub and Render instances for future assignments. You will create an Echo server, setup auto-deployment on Render, and test the server using Postman.","tags":null,"title":"Assignment One","type":"book"},{"authors":[],"categories":null,"content":"","date":1684231200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684231200,"objectID":"26a574271c42195a0e8e02914be8e2a3","permalink":"https://mccarthy.phd/talk/enhancing-financial-market-analysis-and-prediction-with-emotion-corpora-and-news-co-occurrence-network/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/talk/enhancing-financial-market-analysis-and-prediction-with-emotion-corpora-and-news-co-occurrence-network/","section":"event","summary":"This work seeks to develop a novel approach for understanding how news analysis and global events influence market sentiment and performance across various sectors.","tags":[],"title":"Enhancing Financial Market Analysis and Prediction with Emotion Corpora and News Co-Occurrence Network","type":"event"},{"authors":["Shawn McCarthy","Gita Alaghband"],"categories":null,"content":"","date":1680307200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680307200,"objectID":"ebcb0f22ea5dd3c90a9f6e0ba20693f8","permalink":"https://mccarthy.phd/publication/mccarthy-enhancing-2023/","publishdate":"2023-05-20T16:38:03.042667Z","relpermalink":"/publication/mccarthy-enhancing-2023/","section":"publication","summary":"This study employs an improved natural language processing algorithm to analyze over 500,000 financial news articles from sixteen major sources across 12 sectors, with the top 10 companies in each sector. The analysis identifies shifting economic activity based on emotional news sentiment and develops a news co-occurrence network to show relationships between companies even across sectors. This study created an improved corpus and algorithm to identify emotions in financial news. The improved method identified 18 additional emotions beyond what was previously analyzed. The researchers labeled financial terms from Investopedia to validate the categorization performance of the new method. Using the improved algorithm, we analyzed how emotions in financial news relate to market movement of pairs of companies. We found a moderate correlation (above 60%) between emotion sentiment and market movement. To validate this finding, we further checked the correlation coefficients between sentiment alone, and found that consumer discretionary, consumer staples, financials, industrials, and technology sectors showed similar trends. Our findings suggest that emotional sentiment analysis provide valuable insights for financial market analysis and prediction. The technical analysis framework developed in this study can be integrated into a larger investment strategy, enabling organizations to identify potential opportunities and develop informed strategies. The insights derived from the co-occurrence model may be leveraged by companies to strengthen their risk management functions, making it an asset within a comprehensive investment strategy.","tags":["co-occurrence graph","emotional sentiment analysis","financial news","NLP"],"title":"Enhancing Financial Market Analysis and Prediction with Emotion Corpora and News Co-Occurrence Network","type":"publication"},{"authors":[],"categories":null,"content":"","date":1678708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678708800,"objectID":"04a7591545c04c325c0b8b602ddf1558","permalink":"https://mccarthy.phd/talk/recommender-systems-hands-on-workshop-training-wide-and-deep-recommenders-day-2/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/talk/recommender-systems-hands-on-workshop-training-wide-and-deep-recommenders-day-2/","section":"event","summary":"This online workshop consists of presentations \u0026 labs covering the fundamental techniques \u0026 tools for building highly effective recommender systems from matrix based recommender systems to wide \u0026 deep network models.","tags":[],"title":"Recommender Systems Hands on Workshop | Training Wide and Deep Recommenders | Day 2","type":"event"},{"authors":[],"categories":null,"content":"","date":1678449600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678449600,"objectID":"493da389825a9da2ab6173f22b215f99","permalink":"https://mccarthy.phd/talk/recommender-systems-hands-on-workshop/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/talk/recommender-systems-hands-on-workshop/","section":"event","summary":"This online workshop consists of presentations \u0026 labs covering the fundamental techniques \u0026 tools for building highly effective recommender systems from matrix based recommender systems to wide \u0026 deep network models.","tags":[],"title":"Recommender Systems Hands on Workshop","type":"event"},{"authors":null,"categories":null,"content":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you‚Äôll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders ‚Ä¶","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://mccarthy.phd/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post"},{"authors":["Shawn McCarthy"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post‚Äôs folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://mccarthy.phd/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let‚Äôs make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://mccarthy.phd/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://mccarthy.phd/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"}]